# The name of the action (displayed on Github)
name: Deploy to ECR

# add necessary permissions
permissions:
  id-token: write
  contents: read

# specify events that should trigger the workflow
on:
  # run this action on every push to your branch
  # (https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-to-specific-branches-occurs)
  # TODO

# Define the jobs that should run when the workflow is triggered
jobs:
  # The name `build` is just an arbitrary name for our job
  build:
    name: Build Image
    # Ubuntu is the operating system the worker running the action uses. Other options are
    # windows and mac. However, ubuntu comes with Docker installed, so we will use this
    runs-on: ubuntu-latest

    steps:
      # The below link shows an example of how to push a Docker image to ECR
      # https://github.com/aws-actions/amazon-ecr-login#examples-of-usage

      # Step 1: Move the code from this repository onto the machine running
      # this action
      - name: Check out code
        uses: # TODO

      # Step 2: Configure AWS credentials
      # We will be using the role `arn:aws:iam::341854541677:role/github-role`
      # for authentication and `eu-north-1` as region
      - name: Configure AWS credentials
        # TODO

      # Step 3: Login to AWS ECR so we can push the image
      - name: Login to Amazon ECR
        # TODO

      # Step 4: build, tag and push the image to AWS ECR
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          # Here you need to create three environment variables
          # We will be using the `be-dbt-docker-demo` ECR repository
          # The image tag
          REGISTRY: # TODO: use the output from step 3
          REPOSITORY: dbt-docker
          IMAGE_TAG: # TODO: tag the image with your name so we can verify it in ECR
        run: | # TODO: build and push the image
          TODO
