# # The name of the action (displayed on Github)
# name: Deploy to ECR
# 
# # add necessary permissions
# permissions:
#   id-token: write
#   contents: read
# 
# # specify events that should trigger the workflow
# # (https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-to-specific-branches-occurs)
# on:
#   # ??
#   workflow_dispatch:
# 
# # Define the jobs that should run when the workflow is triggered
# jobs:
#  
#   # The job `build` is our only job
#   build:
#     
#     name: Build Image
#     runs-on: ubuntu-latest
#    
#     steps:
#       # The below link shows an example of how to push a Docker image to ECR
#       # https://github.com/aws-actions/amazon-ecr-login#examples-of-usage
#       
#       # Step 1: checkout the code in this repository so the other actions can access it
#     - name: Check out code
#       # uses: ??
#     
# 
#       # Step 2: Configure AWS credentials
#       # We will be using the role `arn:aws:iam::341854541677:role/github-role`
#       # for authentication
#     - name: Configure AWS credentials
#       # ??
# 
#       # Step 3: Login to AWS ECR so we can push the image
#     - name: Login to Amazon ECR
#       # ?? 
# 
#       # Step 4: build, tag and push the image to AWS ECR
#     - name: Build, tag, and push docker image to Amazon ECR
#       env:
#         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         REPOSITORY: be-dbt-docker-demo
#         IMAGE_TAG: demo-${{ github.run_number }}
#       run: |
#         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
